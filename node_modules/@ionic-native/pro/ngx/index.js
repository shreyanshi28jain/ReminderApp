var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, checkAvailability, cordovaInstance } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ProDeploy = /** @class */ (function () {
    function ProDeploy(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    ProDeploy.prototype.init = function (config) { return cordovaInstance(this, "init", {}, arguments); };
    ProDeploy.prototype.check = function () { return cordovaInstance(this, "check", {}, arguments); };
    ProDeploy.prototype.download = function () { return cordovaInstance(this, "download", { "observable": true }, arguments); };
    ProDeploy.prototype.extract = function () { return cordovaInstance(this, "extract", { "observable": true }, arguments); };
    ProDeploy.prototype.redirect = function () { return cordovaInstance(this, "redirect", {}, arguments); };
    ProDeploy.prototype.info = function () { return cordovaInstance(this, "info", {}, arguments); };
    ProDeploy.prototype.getVersions = function () { return cordovaInstance(this, "getVersions", {}, arguments); };
    ProDeploy.prototype.deleteVersion = function (version) { return cordovaInstance(this, "deleteVersion", {}, arguments); };
    return ProDeploy;
}());
export { ProDeploy };
var Pro = /** @class */ (function (_super) {
    __extends(Pro, _super);
    function Pro() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pro.prototype.deploy = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                if (_this._deploy) {
                    return _this._deploy;
                }
                else {
                    _this._deploy = new ProDeploy(Pro.getPlugin().deploy);
                    return _this._deploy;
                }
            }
        })();
    };
    Pro.prototype.enableCrashLogging = function () { return cordova(this, "enableCrashLogging", {}, arguments); };
    Pro.prototype.checkForPendingCrash = function () { return cordova(this, "checkForPendingCrash", {}, arguments); };
    Pro.prototype.loadPendingCrash = function () { return cordova(this, "loadPendingCrash", {}, arguments); };
    Pro.prototype.forceCrash = function () { return cordova(this, "forceCrash", {}, arguments); };
    Pro.prototype.getAppInfo = function () { return cordova(this, "getAppInfo", {}, arguments); };
    Pro.pluginName = "Pro";
    Pro.plugin = "cordova-plugin-ionic";
    Pro.pluginRef = "IonicCordova";
    Pro.repo = "https://github.com/ionic-team/cordova-plugin-ionic";
    Pro.platforms = ["Android", "iOS"];
    Pro.install = "ionic cordova plugin add cordova-plugin-ionic --save --variable APP_ID=\"XXXXXXXX\" --variable CHANNEL_NAME=\"Channel\"";
    Pro = __decorate([
        Injectable()
    ], Pro);
    return Pro;
}(IonicNativePlugin));
export { Pro };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Byby9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxrRUFBcUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXFDaEMsbUJBQW9CLGVBQW9CO1FBQXBCLG9CQUFlLEdBQWYsZUFBZSxDQUFLO0lBQUcsQ0FBQztJQU81Qyx3QkFBSSxhQUFDLE1BQW9CO0lBT3pCLHlCQUFLO0lBV0wsNEJBQVE7SUFTUiwyQkFBTztJQU1QLDRCQUFRO0lBT1Isd0JBQUk7SUFRSiwrQkFBVztJQU9YLGlDQUFhLGFBQUMsT0FBZTtvQkFyRy9COzs7O0lBeUl5Qix1QkFBaUI7Ozs7SUFPeEMsb0JBQU07OzttREFBYztnQkFDbEIsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3JCO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNyRCxPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3JCO2FBQ0Y7OztJQU9ELGdDQUFrQjtJQVNsQixrQ0FBb0I7SUFTcEIsOEJBQWdCO0lBU2hCLHdCQUFVO0lBU1Ysd0JBQVU7Ozs7Ozs7SUF6REMsR0FBRztRQURmLFVBQVUsRUFBRTtPQUNBLEdBQUc7Y0F6SWhCO0VBeUl5QixpQkFBaUI7U0FBN0IsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFDaGVjaywgQ29yZG92YUluc3RhbmNlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudGx5IHJ1bm5pbmcgYXBwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwSW5mbyB7XG4gIHBsYXRmb3JtOiBzdHJpbmc7XG4gIHBsYXRmb3JtVmVyc2lvbjogc3RyaW5nO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGJ1bmRsZU5hbWU6IHN0cmluZztcbiAgYnVuZGxlVmVyc2lvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGxpdmUgdXBkYXRlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95SW5mbyB7XG4gIGRlcGxveV91dWlkOiBzdHJpbmc7XG4gIGNoYW5uZWw6IHN0cmluZztcbiAgYmluYXJ5X3ZlcnNpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBPYmplY3QgZm9yIG1hbnVhbGx5IGNvbmZpZ3VyaW5nIGRlcGxveVxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveUNvbmZpZyB7XG4gIGFwcElkPzogc3RyaW5nO1xuICBob3N0Pzogc3RyaW5nO1xuICBjaGFubmVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBQcm9ncmVzc01lc3NhZ2UgPSBudW1iZXIgfCBzdHJpbmc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgUHJvRGVwbG95IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfb2JqZWN0SW5zdGFuY2U6IGFueSkge31cblxuICAvKipcbiAgICogUmUtaW5pdGlhbGl6ZSBEZXBsb3kgcGx1Z2luIHdpdGggYSBuZXcgQXBwIElEIGFuZCBob3N0LiAgTm90IHVzZWQgaW4gbW9zdCBjYXNlcy5cbiAgICogQHBhcmFtIGNvbmZpZyBBIHZhbGlkIERlcGxveSBjb25maWcgb2JqZWN0XG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKClcbiAgaW5pdChjb25maWc6IERlcGxveUNvbmZpZyk6IFByb21pc2U8dm9pZD4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogQ2hlY2sgYSBjaGFubmVsIGZvciBhbiBhdmFpbGFibGUgdXBkYXRlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmVzb2x2ZXMgd2l0aCAndHJ1ZScgb3IgJ2ZhbHNlJywgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGNoZWNrKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERvd25sb2FkIGFuIGF2YWlsYWJsZSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8UHJvZ3Jlc3NNZXNzYWdlPn0gVXBkYXRlcyB3aXRoIHBlcmNlbnQgY29tcGxldGlvbiwgb3IgZXJyb3JzIHdpdGggYSBtZXNzYWdlLlxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZVxuICB9KVxuICBkb3dubG9hZCgpOiBPYnNlcnZhYmxlPFByb2dyZXNzTWVzc2FnZT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogVW56aXAgdGhlIGxhdGVzdCBkb3dubG9hZGVkIHZlcnNpb25cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxQcm9ncmVzc01lc3NhZ2U+fSBVcGRhdGVzIHdpdGggcGVyY2VudCBjb21wbGV0aW9uLCBvciBlcnJvcnMgd2l0aCBhIG1lc3NhZ2UuXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIGV4dHJhY3QoKTogT2JzZXJ2YWJsZTxQcm9ncmVzc01lc3NhZ2U+IHsgcmV0dXJuOyB9XG5cbiAgLyoqXG4gICAqIFJlbG9hZCBhcHAgd2l0aCB0aGUgZGVwbG95ZWQgdmVyc2lvblxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIHJlZGlyZWN0KCk6IFByb21pc2U8dm9pZD4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogR2V0IGluZm8gYWJvdXQgdGhlIHZlcnNpb24gcnVubmluZyBvbiB0aGUgZGV2aWNlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RGVwbG95SW5mbz59IEluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHZlcnNpb24gcnVubmluZyBvbiB0aGUgYXBwLlxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGluZm8oKTogUHJvbWlzZTxEZXBsb3lJbmZvPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgdmVyc2lvbnMgc3RvcmVkIG9uIHRoZSBkZXZpY2VcbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxuICBnZXRWZXJzaW9ucygpOiBQcm9taXNlPHN0cmluZ1tdPiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSB2ZXJzaW9uIHN0b3JlZCBvbiB0aGUgZGV2aWNlIGJ5IFVVSURcbiAgICogQHBhcmFtIHZlcnNpb24gQSB2ZXJzaW9uIFVVSURcbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxuICBkZWxldGVWZXJzaW9uKHZlcnNpb246IHN0cmluZyk6IFByb21pc2U8dm9pZD4geyByZXR1cm47IH1cbn1cblxuLyoqXG4gKiBAbmFtZSBQcm9cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyBJb25pYyBQcm8gc2VydmljZXMgbGlrZSBsaXZlIHVwZGF0ZXMgYW5kIGVycm9yIG1vbml0b3JpbmdcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFBybywgQXBwSW5mbywgRGVwbG95SW5mbyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcHJvL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvOiBQcm8pIHsgfVxuICpcbiAqIC8vIEdldCBhcHAgaW5mb1xuICogdGhpcy5wcm8uZ2V0QXBwSW5mbygpLnRoZW4oKHJlczogQXBwSW5mbykgPT4ge1xuICogICBjb25zb2xlLmxvZyhyZXMpXG4gKiB9KVxuICpcbiAqIC8vIEdldCBsaXZlIHVwZGF0ZSBpbmZvXG4gKiB0aGlzLnByby5kZXBsb3kuaW5mbygpLnRoZW4oKHJlczogRGVwbG95SW5mbykgPT4ge1xuICogICBjb25zb2xlLmxvZyhyZXMpXG4gKiB9KVxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUHJvJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW9uaWMnLFxuICBwbHVnaW5SZWY6ICdJb25pY0NvcmRvdmEnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vY29yZG92YS1wbHVnaW4taW9uaWMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbiAgaW5zdGFsbDpcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWlvbmljIC0tc2F2ZSAtLXZhcmlhYmxlIEFQUF9JRD1cIlhYWFhYWFhYXCIgLS12YXJpYWJsZSBDSEFOTkVMX05BTUU9XCJDaGFubmVsXCInXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBybyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgX2RlcGxveTogUHJvRGVwbG95O1xuXG4gIC8qKlxuICAgKiBJb25pYyBQcm8gRGVwbG95IC5qcyBBUEkuXG4gICAqL1xuICBAQ29yZG92YUNoZWNrKHsgc3luYzogdHJ1ZSB9KVxuICBkZXBsb3koKTogUHJvRGVwbG95IHtcbiAgICBpZiAodGhpcy5fZGVwbG95KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVwbG95O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kZXBsb3kgPSBuZXcgUHJvRGVwbG95KFByby5nZXRQbHVnaW4oKS5kZXBsb3kpO1xuICAgICAgcmV0dXJuIHRoaXMuX2RlcGxveTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTm90IHlldCBpbXBsZW1lbnRlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmFibGVDcmFzaExvZ2dpbmcoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTm90IHlldCBpbXBsZW1lbnRlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjaGVja0ZvclBlbmRpbmdDcmFzaCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3QgeWV0IGltcGxlbWVudGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvYWRQZW5kaW5nQ3Jhc2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTm90IHlldCBpbXBsZW1lbnRlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmb3JjZUNyYXNoKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudGx5IHJ1bm5pbmcgYXBwXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGN1cnJlbnQgYXBwIGluZm9cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0QXBwSW5mbygpOiBQcm9taXNlPEFwcEluZm8+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==