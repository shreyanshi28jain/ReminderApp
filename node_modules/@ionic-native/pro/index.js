var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, checkAvailability, cordovaInstance } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ProDeploy = /** @class */ (function () {
    function ProDeploy(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    ProDeploy.prototype.init = function (config) { return cordovaInstance(this, "init", {}, arguments); };
    ProDeploy.prototype.check = function () { return cordovaInstance(this, "check", {}, arguments); };
    ProDeploy.prototype.download = function () { return cordovaInstance(this, "download", { "observable": true }, arguments); };
    ProDeploy.prototype.extract = function () { return cordovaInstance(this, "extract", { "observable": true }, arguments); };
    ProDeploy.prototype.redirect = function () { return cordovaInstance(this, "redirect", {}, arguments); };
    ProDeploy.prototype.info = function () { return cordovaInstance(this, "info", {}, arguments); };
    ProDeploy.prototype.getVersions = function () { return cordovaInstance(this, "getVersions", {}, arguments); };
    ProDeploy.prototype.deleteVersion = function (version) { return cordovaInstance(this, "deleteVersion", {}, arguments); };
    return ProDeploy;
}());
export { ProDeploy };
var ProOriginal = /** @class */ (function (_super) {
    __extends(ProOriginal, _super);
    function ProOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProOriginal.prototype.deploy = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                if (_this._deploy) {
                    return _this._deploy;
                }
                else {
                    _this._deploy = new ProDeploy(ProOriginal.getPlugin().deploy);
                    return _this._deploy;
                }
            }
        })();
    };
    ProOriginal.prototype.enableCrashLogging = function () { return cordova(this, "enableCrashLogging", {}, arguments); };
    ProOriginal.prototype.checkForPendingCrash = function () { return cordova(this, "checkForPendingCrash", {}, arguments); };
    ProOriginal.prototype.loadPendingCrash = function () { return cordova(this, "loadPendingCrash", {}, arguments); };
    ProOriginal.prototype.forceCrash = function () { return cordova(this, "forceCrash", {}, arguments); };
    ProOriginal.prototype.getAppInfo = function () { return cordova(this, "getAppInfo", {}, arguments); };
    ProOriginal.pluginName = "Pro";
    ProOriginal.plugin = "cordova-plugin-ionic";
    ProOriginal.pluginRef = "IonicCordova";
    ProOriginal.repo = "https://github.com/ionic-team/cordova-plugin-ionic";
    ProOriginal.platforms = ["Android", "iOS"];
    ProOriginal.install = "ionic cordova plugin add cordova-plugin-ionic --save --variable APP_ID=\"XXXXXXXX\" --variable CHANNEL_NAME=\"Channel\"";
    return ProOriginal;
}(IonicNativePlugin));
var Pro = new ProOriginal();
export { Pro };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Byby9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxrRUFBcUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXFDaEMsbUJBQW9CLGVBQW9CO1FBQXBCLG9CQUFlLEdBQWYsZUFBZSxDQUFLO0lBQUcsQ0FBQztJQU81Qyx3QkFBSSxhQUFDLE1BQW9CO0lBT3pCLHlCQUFLO0lBV0wsNEJBQVE7SUFTUiwyQkFBTztJQU1QLDRCQUFRO0lBT1Isd0JBQUk7SUFRSiwrQkFBVztJQU9YLGlDQUFhLGFBQUMsT0FBZTtvQkFyRy9COzs7O0lBeUl5Qix1QkFBaUI7Ozs7SUFPeEMsb0JBQU07OzttREFBYztnQkFDbEIsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3JCO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNyRCxPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3JCO2FBQ0Y7OztJQU9ELGdDQUFrQjtJQVNsQixrQ0FBb0I7SUFTcEIsOEJBQWdCO0lBU2hCLHdCQUFVO0lBU1Ysd0JBQVU7Ozs7Ozs7Y0FsTVo7RUF5SXlCLGlCQUFpQjtTQUE3QixHQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUNoZWNrLCBDb3Jkb3ZhSW5zdGFuY2UsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50bHkgcnVubmluZyBhcHBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBJbmZvIHtcbiAgcGxhdGZvcm06IHN0cmluZztcbiAgcGxhdGZvcm1WZXJzaW9uOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgYnVuZGxlTmFtZTogc3RyaW5nO1xuICBidW5kbGVWZXJzaW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgbGl2ZSB1cGRhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lJbmZvIHtcbiAgZGVwbG95X3V1aWQ6IHN0cmluZztcbiAgY2hhbm5lbDogc3RyaW5nO1xuICBiaW5hcnlfdmVyc2lvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9iamVjdCBmb3IgbWFudWFsbHkgY29uZmlndXJpbmcgZGVwbG95XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95Q29uZmlnIHtcbiAgYXBwSWQ/OiBzdHJpbmc7XG4gIGhvc3Q/OiBzdHJpbmc7XG4gIGNoYW5uZWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFByb2dyZXNzTWVzc2FnZSA9IG51bWJlciB8IHN0cmluZztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9EZXBsb3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vYmplY3RJbnN0YW5jZTogYW55KSB7fVxuXG4gIC8qKlxuICAgKiBSZS1pbml0aWFsaXplIERlcGxveSBwbHVnaW4gd2l0aCBhIG5ldyBBcHAgSUQgYW5kIGhvc3QuICBOb3QgdXNlZCBpbiBtb3N0IGNhc2VzLlxuICAgKiBAcGFyYW0gY29uZmlnIEEgdmFsaWQgRGVwbG95IGNvbmZpZyBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxuICBpbml0KGNvbmZpZzogRGVwbG95Q29uZmlnKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBhIGNoYW5uZWwgZm9yIGFuIGF2YWlsYWJsZSB1cGRhdGVcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXNvbHZlcyB3aXRoICd0cnVlJyBvciAnZmFsc2UnLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKClcbiAgY2hlY2soKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWQgYW4gYXZhaWxhYmxlIHZlcnNpb25cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxQcm9ncmVzc01lc3NhZ2U+fSBVcGRhdGVzIHdpdGggcGVyY2VudCBjb21wbGV0aW9uLCBvciBlcnJvcnMgd2l0aCBhIG1lc3NhZ2UuXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIGRvd25sb2FkKCk6IE9ic2VydmFibGU8UHJvZ3Jlc3NNZXNzYWdlPiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBVbnppcCB0aGUgbGF0ZXN0IGRvd25sb2FkZWQgdmVyc2lvblxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFByb2dyZXNzTWVzc2FnZT59IFVwZGF0ZXMgd2l0aCBwZXJjZW50IGNvbXBsZXRpb24sIG9yIGVycm9ycyB3aXRoIGEgbWVzc2FnZS5cbiAgICovXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xuICAgIG9ic2VydmFibGU6IHRydWVcbiAgfSlcbiAgZXh0cmFjdCgpOiBPYnNlcnZhYmxlPFByb2dyZXNzTWVzc2FnZT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogUmVsb2FkIGFwcCB3aXRoIHRoZSBkZXBsb3llZCB2ZXJzaW9uXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKClcbiAgcmVkaXJlY3QoKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBHZXQgaW5mbyBhYm91dCB0aGUgdmVyc2lvbiBydW5uaW5nIG9uIHRoZSBkZXZpY2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxEZXBsb3lJbmZvPn0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgdmVyc2lvbiBydW5uaW5nIG9uIHRoZSBhcHAuXG4gICAqL1xuICBAQ29yZG92YUluc3RhbmNlKClcbiAgaW5mbygpOiBQcm9taXNlPERlcGxveUluZm8+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGlzdCB2ZXJzaW9ucyBzdG9yZWQgb24gdGhlIGRldmljZVxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGdldFZlcnNpb25zKCk6IFByb21pc2U8c3RyaW5nW10+IHsgcmV0dXJuOyB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHZlcnNpb24gc3RvcmVkIG9uIHRoZSBkZXZpY2UgYnkgVVVJRFxuICAgKiBAcGFyYW0gdmVyc2lvbiBBIHZlcnNpb24gVVVJRFxuICAgKi9cbiAgQENvcmRvdmFJbnN0YW5jZSgpXG4gIGRlbGV0ZVZlcnNpb24odmVyc2lvbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybjsgfVxufVxuXG4vKipcbiAqIEBuYW1lIFByb1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBlbmFibGVzIElvbmljIFBybyBzZXJ2aWNlcyBsaWtlIGxpdmUgdXBkYXRlcyBhbmQgZXJyb3IgbW9uaXRvcmluZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUHJvLCBBcHBJbmZvLCBEZXBsb3lJbmZvIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wcm8vbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwcm86IFBybykgeyB9XG4gKlxuICogLy8gR2V0IGFwcCBpbmZvXG4gKiB0aGlzLnByby5nZXRBcHBJbmZvKCkudGhlbigocmVzOiBBcHBJbmZvKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKHJlcylcbiAqIH0pXG4gKlxuICogLy8gR2V0IGxpdmUgdXBkYXRlIGluZm9cbiAqIHRoaXMucHJvLmRlcGxveS5pbmZvKCkudGhlbigocmVzOiBEZXBsb3lJbmZvKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKHJlcylcbiAqIH0pXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdQcm8nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pb25pYycsXG4gIHBsdWdpblJlZjogJ0lvbmljQ29yZG92YScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9jb3Jkb3ZhLXBsdWdpbi1pb25pYycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxuICBpbnN0YWxsOlxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4taW9uaWMgLS1zYXZlIC0tdmFyaWFibGUgQVBQX0lEPVwiWFhYWFhYWFhcIiAtLXZhcmlhYmxlIENIQU5ORUxfTkFNRT1cIkNoYW5uZWxcIidcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICBfZGVwbG95OiBQcm9EZXBsb3k7XG5cbiAgLyoqXG4gICAqIElvbmljIFBybyBEZXBsb3kgLmpzIEFQSS5cbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soeyBzeW5jOiB0cnVlIH0pXG4gIGRlcGxveSgpOiBQcm9EZXBsb3kge1xuICAgIGlmICh0aGlzLl9kZXBsb3kpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZXBsb3k7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RlcGxveSA9IG5ldyBQcm9EZXBsb3koUHJvLmdldFBsdWdpbigpLmRlcGxveSk7XG4gICAgICByZXR1cm4gdGhpcy5fZGVwbG95O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOb3QgeWV0IGltcGxlbWVudGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGVuYWJsZUNyYXNoTG9nZ2luZygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3QgeWV0IGltcGxlbWVudGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNoZWNrRm9yUGVuZGluZ0NyYXNoKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdCB5ZXQgaW1wbGVtZW50ZWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9hZFBlbmRpbmdDcmFzaCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3QgeWV0IGltcGxlbWVudGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZvcmNlQ3Jhc2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50bHkgcnVubmluZyBhcHBcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggY3VycmVudCBhcHAgaW5mb1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRBcHBJbmZvKCk6IFByb21pc2U8QXBwSW5mbz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19